--- libgcrypt-1.5.0/random/rndlinux.c.orig	2011-02-04 20:16:03.000000000 +0100
+++ libgcrypt-1.5.0/random/rndlinux.c	2011-07-03 11:04:00.391674161 +0200
@@ -32,6 +32,7 @@
 #include <string.h>
 #include <unistd.h>
 #include <fcntl.h>
+#include <poll.h>
 #include "types.h"
 #include "g10lib.h"
 #include "rand-internal.h"
@@ -130,15 +131,12 @@
                  return with something we will actually use 100ms. */
   while (length)
     {
-      fd_set rfds;
-      struct timeval tv;
+      struct pollfd fds;
       int rc;
 
-      FD_ZERO(&rfds);
-      FD_SET(fd, &rfds);
-      tv.tv_sec = delay;
-      tv.tv_usec = delay? 0 : 100000;
-      if ( !(rc=select(fd+1, &rfds, NULL, NULL, &tv)) )
+      fds.fd = fd;
+      fds.events = POLLIN;
+      if ( !(rc=poll(&fds, 1, delay ? (delay*1000) : 100)) )
         {
           if (!any_need_entropy || last_so_far != (want - length) )
             {
@@ -152,7 +150,7 @@
 	}
       else if( rc == -1 )
         {
-          log_error ("select() error: %s\n", strerror(errno));
+          log_error ("poll() error: %s\n", strerror(errno));
           if (!delay)
             delay = 1; /* Use 1 second if we encounter an error before
                           we have ever blocked.  */
